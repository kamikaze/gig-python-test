import enum

from geoalchemy2 import Geography
from sqlalchemy import (
    Column, Enum, Integer, String, ForeignKey, DateTime, PrimaryKeyConstraint, UniqueConstraint, Index,
    text, true, and_, Date, ARRAY
)
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.orm import relationship, backref
from sqlalchemy.sql import expression
from sqlalchemy.sql.ddl import CreateColumn

from gig_python_test.db import Base


class UTCNow(expression.FunctionElement):
    type = DateTime()


@compiles(UTCNow, 'postgresql')
def pg_utcnow(element, compiler, **kw):
    return "TIMEZONE('utc', CURRENT_TIMESTAMP)"


@compiles(CreateColumn, 'postgresql')
def use_identity(element, compiler, **kw):
    return compiler.visit_create_column(element, **kw).replace('SERIAL', 'INT GENERATED BY DEFAULT AS IDENTITY')


class CharacterStatus(enum.IntEnum):
    DEAD = 0
    ALIVE = 1


class BaseDBModel:
    id = Column(Integer, primary_key=True)
    created_at = Column(DateTime, server_default=UTCNow())
    updated_at = Column(DateTime, onupdate=UTCNow())


class Characters(BaseDBModel, Base):
    __tablename__ = 'characters'

    deleted_at = Column(DateTime)

    name = Column(String)
    birthday = Column(Date)
    img = Column(String, nullable=True)
    status = Column(Enum(CharacterStatus), default=CharacterStatus.ALIVE)
    nickname = Column(String)
    occupation = Column(ARRAY(String))
    appearance = Column(ARRAY(String))
    portrayed = Column(String)
    category = Column(ARRAY(String))

    __table_args__ = (
        Index('uq_characters_name', text('lower(name)'), unique=True, postgresql_where=(deleted_at.is_(None))),
        Index('uq_characters_nickname', text('lower(nickname)'), unique=True, postgresql_where=(deleted_at.is_(None))),
    )


class Locations(BaseDBModel, Base):
    __tablename__ = 'locations'

    character_id = Column(Integer, ForeignKey('characters.id'), nullable=False)
    character = relationship('Characters', backref=backref('locations'), foreign_keys=[character_id])
    timestamp = Column(DateTime)
    coordinates = Column(Geography(geometry_type='POINT', srid=4326))
